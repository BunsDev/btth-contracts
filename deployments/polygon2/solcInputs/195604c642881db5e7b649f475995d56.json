{
  "language": "Solidity",
  "sources": {
    "contracts/btthGame.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ncontract BtthGame {\n    // Events\n    event SkillAuction(uint256 bidAmount, address bidder, string skillName);\n    event QuestCompleted(address player, string questName);\n    event QuestInitiated(address player, string questName);\n\n    // Structs\n    struct Character {\n        string name;\n        string image;\n        string level;\n        uint256 maxHealth;\n        uint256 health;\n        uint256 attackDamage;\n        uint256 defense;\n        string weapon;\n        uint256 qi;\n        uint256 maxQi;\n        uint256 goldCoin;\n        bool isDead;\n    }\n\n    struct Skill {\n        string name;\n        uint256 qiCost;\n    }\n\n    struct Flame {\n        string color;\n        uint256 rank;\n    }\n\n    struct CharacterInventory {\n        uint256 healthPotion;\n        uint256 qiRecoveryPill;\n        uint256 revivePotion;\n        uint256 attackEnhancePotion;\n        uint256 goldDropEnhancePotion;\n        Skill[] skills;\n        Flame[] flame;\n\n    }\n    struct Ring{\n       bool  isActive;\n      \n\n    }\n\n    struct NPC {\n        string name;\n        string level;\n        uint256 maxHealth;\n        uint256 attackDamage;\n        uint256 health;\n        bool isDefeated;\n    }\n\n    struct Quest {\n        string questName;\n        bool isCompleted;\n    }\n\n    // State variables\n    mapping(address => Quest[]) public quests;\n    mapping(address => NPC[]) public mobs;\n    mapping(address => Character) public players;\n    mapping(address => CharacterInventory) public inventories;\n    mapping(string => uint256) public materialValue;\n    mapping(string => uint16) public levelToValue;\n    mapping(address=>bool[1000]) questReenter;\n    string[] private characterImages = [\n        \"https://ipfs.io/ipfs/Qmay3vWmmBJykcT3gnjwiyPsaVMnVthxEzdCqsmeerxhz6\",\n        \"https://ipfs.io/ipfs/QmXxtdMWeuwvABMUNvD6nVnTXihNGidRw6YLk8KcCceCoU\",\n        \"https://ipfs.io/ipfs/QmXSCRtoxrBPKgTSqvPJkJB4UB6KE5fQowiJKhWNCqwVoS\",\n        \"https://ipfs.io/ipfs/QmRHrKfJVc1DcWw5xEHUtoiku5VXM4a7Z8keaeLc1LMK4L\"\n    ];\n\n    // Constructor\n    constructor() {\n        materialValue[\"healthPotion\"] = 10000;\n        materialValue[\"qiRecoveryPill\"] = 10000;\n        materialValue[\"revivePotion\"] = 100000;\n        materialValue[\"attackEnhancePotion\"] = 1000000;\n        materialValue[\"goldDropEnhancePotion\"] = 1000000;\n\n        // Initialize level to value mapping\n        string[100] memory levels = [\n            \"one star dou zhi qi\", \"two star dou zhi qi\", \"three star dou zhi qi\", \"four star dou zhi qi\",\n            \"five star dou zhi qi\", \"six star dou zhi qi\", \"seven star dou zhi qi\", \"eight star dou zhi qi\",\n            \"nine star dou zhi qi\", \"one star dou zhi\", \"two star dou zhi\", \"three star dou zhi\",\n            \"four star dou zhi\", \"five star dou zhi\", \"six star dou zhi\", \"seven star dou zhi\",\n            \"eight star dou zhi\", \"nine star dou zhi\", \"one star da dou shi\", \"two star da dou shi\",\n            \"three star da dou shi\", \"four star da dou shi\", \"five star da dou shi\", \"six star da dou shi\",\n            \"seven star da dou shi\", \"eight star da dou shi\", \"nine star da dou shi\", \"one star dou shi\",\n            \"two star dou shi\", \"three star dou shi\", \"four star dou shi\", \"five star dou shi\",\n            \"six star dou shi\", \"seven star dou shi\", \"eight star dou shi\", \"nine star dou shi\",\n            \"one star dou ling\", \"two star dou ling\", \"three star dou ling\", \"four star dou ling\",\n            \"five star dou ling\", \"six star dou ling\", \"seven star dou ling\", \"eight star dou ling\",\n            \"nine star dou ling\", \"one star dou wang\", \"two star dou wang\", \"three star dou wang\",\n            \"four star dou wang\", \"five star dou wang\", \"six star dou wang\", \"seven star dou wang\",\n            \"eight star dou wang\", \"nine star dou wang\", \"one star dou huang\", \"two star dou huang\",\n            \"three star dou huang\", \"four star dou huang\", \"five star dou huang\", \"six star dou huang\",\n            \"seven star dou huang\", \"eight star dou huang\", \"nine star dou huang\", \"one star dou zong\",\n            \"two star dou zong\", \"three star dou zong\", \"four star dou zong\", \"five star dou zong\",\n            \"six star dou zong\", \"seven star dou zong\", \"eight star dou zong\", \"nine star dou zong\",\n            \"one star dou zun\", \"two star dou zun\", \"three star dou zun\", \"four star dou zun\",\n            \"five star dou zun\", \"six star dou zun\", \"seven star dou zun\", \"eight star dou zun\",\n            \"nine star dou zun\", \"ban sheng\", \"one star dou sheng\", \"two star dou sheng\", \"three star dou sheng\",\n            \"four star dou sheng\", \"five star dou sheng\", \"six star dou sheng\", \"seven star dou sheng\",\n            \"eight star dou sheng\", \"nine star dou sheng\", \"one star dou di\", \"two star dou di\",\n            \"three star dou di\", \"four star dou di\", \"five star dou di\", \"six star dou di\",\n            \"seven star dou di\", \"eight star dou di\", \"nine star dou di\"\n        ];\n\n        for (uint16 i = 0; i < levels.length; i++) {\n            levelToValue[levels[i]] = i + 1;\n        }\n    }\n\n    // Functions\n    function newGame() public {\n        string memory yourCharacterImage = characterImages[0];\n        players[msg.sender] = Character(\"Xiao Yan\", yourCharacterImage, \"two star dou zhi qi\", 200, 200, 0, 0, \"nothing\", 0, 0, 0,false);\n        for(uint256 i=0;i<1000;i++){\n            questReenter[msg.sender][i]=false;\n        }\n\n    }\n\n    function equalify(string memory string1, string memory string2) public pure returns (bool) {\n        return keccak256(abi.encodePacked(string1)) == keccak256(abi.encodePacked(string2));\n    }\n\n    function store(uint16 num1, uint16 num2, uint16 num3, uint16 num4, uint16 num5) public {\n        uint256 amount = (num1 * materialValue[\"healthPotion\"]) +\n                         (num2 * materialValue[\"qiRecoveryPill\"]) +\n                         (num3 * materialValue[\"revivePotion\"]) +\n                         (num4 * materialValue[\"attackEnhancePotion\"]) +\n                         (num5 * materialValue[\"goldDropEnhancePotion\"]);\n        require(amount > 0 && amount <= players[msg.sender].goldCoin, \"Please either submit correct choice or you do not have enough gold\");\n        players[msg.sender].goldCoin -= amount;\n        inventories[msg.sender].healthPotion += num1;\n        inventories[msg.sender].qiRecoveryPill += num2;\n        inventories[msg.sender].attackEnhancePotion += num3;\n        inventories[msg.sender].goldDropEnhancePotion += num4;\n    }\nfunction removeNPC(uint256 index) private {\n    require(index < mobs[msg.sender].length, \"Index out of bounds\");\n    \n    // Move the last element into the position to be deleted\n    mobs[msg.sender][index] = mobs[msg.sender][mobs[msg.sender].length - 1];\n    \n    // Remove the last element\n    mobs[msg.sender].pop();\n}\n\n\n    // Quest Functions\n    function Quest1() public {\n        require(players[msg.sender].health > 0, \"Please create your character first\");\n        require(questReenter[msg.sender][0]==false,\"you have already completed it\");\n        inventories[msg.sender].skills.push(Skill(\"vaccum palm\", 10));\n        inventories[msg.sender].skills.push(Skill(\"octane blast\", 20));\n        players[msg.sender] = Character(\"Xiao Yan\", players[msg.sender].image, \"eight star dou zhi qi\", 300, 300, 30, 10, players[msg.sender].weapon, 50, 50, players[msg.sender].goldCoin,false);\n        quests[msg.sender].push(Quest(\"strengthen begins\", true));\n        questReenter[msg.sender][0]==true;\n        emit QuestCompleted(msg.sender, \"Quest 1: strengthen begins\");\n\n    }\n\n    function Quest2Initiation() public {\n\n        require(quests[msg.sender].length > 0 && quests[msg.sender][0].isCompleted == true, \"You should complete Quest 1 first\");\n        require(questReenter[msg.sender][1]==false,\"you have already completed it\");\n        mobs[msg.sender].push(NPC(\"Xiao Ke\", \"six star dou zhi qi\", 280, 20, 280, false));\n        mobs[msg.sender].push(NPC(\"Xiao Ning\", \"one star dou zhi\", 350, 35, 300, false));\n        emit QuestInitiated(msg.sender, \"Quest 2: Initiated now you have to defeat Xiao Ke and Xiao Ning\");\n        \n    }\n\n    function Quest2Submission() public {\n    require(questReenter[msg.sender][1]==false,\"you have already completed it\");\n    require(mobs[msg.sender].length >= 2, \"Not enough mobs to defeat\");\n    require(!players[msg.sender].isDead, \"Revive your character first\");\n    require(mobs[msg.sender][0].isDefeated, \"Defeat Xiao Ke first\");\n    require(mobs[msg.sender][1].isDefeated, \"Defeat Xiao Ning first\");\n\n    // Remove the NPCs\n    if (mobs[msg.sender].length > 1) {\n        removeNPC(1); // Remove the second NPC first to avoid index shift issues\n    }\n    if (mobs[msg.sender].length > 0) {\n        removeNPC(0); // Then remove the first NPC\n    }\n\n    // Update player's information\n    players[msg.sender].level = \"one star dou zhi\";\n    players[msg.sender].maxHealth = 400;\n    players[msg.sender].health = players[msg.sender].maxHealth;\n    players[msg.sender].attackDamage = 40;\n    players[msg.sender].defense = 20;\n    players[msg.sender].maxQi = 60;\n    players[msg.sender].goldCoin += 40000;\n\n    // Add skill to inventory\n    inventories[msg.sender].skills.push(Skill(\"terminal Blaze\", 0));\n\n    // Mark quest as completed\n    quests[msg.sender].push(Quest(\"returning\", true));\n   questReenter[msg.sender][1]==true;\n    // Emit event\n    emit QuestCompleted(msg.sender, \"Quest 2: You have successfully completed the quest. You have been rewarded, and now you can start fighting with real players.\");\n}\n\n\n        function normalAttack(uint256 noOfTimes,uint256 npcIndex) public {\n            require(mobs[msg.sender][npcIndex].health>0,\"dead already\");\n            uint256 totalCalcultedDamage=noOfTimes*players[msg.sender].attackDamage;\n            uint256 mobHealth=mobs[msg.sender][npcIndex].health;\n            uint256 requiredTimes=(mobHealth/players[msg.sender].attackDamage)+1;\n            uint256 mobUnitDamage=mobs[msg.sender][npcIndex].attackDamage;\n            uint256 playerHealth=players[msg.sender].health;\n            uint256 playerDefence=players[msg.sender].defense;\n            uint256 mobTimes=((playerHealth)/(mobUnitDamage-playerDefence))+1;\n            if((noOfTimes>=requiredTimes)&&(mobTimes>(requiredTimes-1))){\n                    mobs[msg.sender][npcIndex].health=0;\n                    mobs[msg.sender][npcIndex].isDefeated=true;\n                    uint256 damageTakenByPlayer=((requiredTimes-1)*mobUnitDamage)-(playerDefence*(requiredTimes-1));\n                    players[msg.sender].health-=damageTakenByPlayer;\n            }\n            else if((noOfTimes<requiredTimes)&&(mobTimes>noOfTimes)){\n                       mobs[msg.sender][npcIndex].health-=totalCalcultedDamage;\n                        uint256 damageTakenByPlayer=((noOfTimes)*mobUnitDamage)-(playerDefence*(noOfTimes));\n                         players[msg.sender].health-=damageTakenByPlayer;\n\n            }\n              else if((noOfTimes<requiredTimes)&&(mobTimes<=noOfTimes)){\n                       mobs[msg.sender][npcIndex].health-=(mobTimes*players[msg.sender].attackDamage);\n                         players[msg.sender].health=0;\n                         players[msg.sender].isDead=true;\n\n            }\n            else{\n                   mobs[msg.sender][npcIndex].health-=(mobTimes*players[msg.sender].attackDamage);\n                         players[msg.sender].health=0;\n                         players[msg.sender].isDead=true;\n            }\n        }\n\n\n        function skillDamagefunction(uint256 skillIndex,uint256 mobIndex) public {\n           require(mobs[msg.sender][mobIndex].health>0,\"dead already\");\n        if(inventories[msg.sender].skills[skillIndex].qiCost==10){\n             if(levelToValue[players[msg.sender].level]>levelToValue[mobs[msg.sender][mobIndex].level]){\n                    mobs[msg.sender][mobIndex].health=0;\n                    mobs[msg.sender][mobIndex].isDefeated=true; \n                    players[msg.sender].qi-=10;\n             }\n             else {\n                    players[msg.sender].health-=(players[msg.sender].health)/2;\n                    players[msg.sender].qi-=10;\n\n             }\n        }\n        else if(inventories[msg.sender].skills[skillIndex].qiCost==20){\n                 uint256 trueDamage=players[msg.sender].qi*10;\n                 if(trueDamage>=mobs[msg.sender][mobIndex].health){\n                         mobs[msg.sender][mobIndex].health=0;\n                          mobs[msg.sender][mobIndex].isDefeated=true; \n                          players[msg.sender].qi-=20;\n                 }\n                 else{\n                     mobs[msg.sender][mobIndex].health-=mobs[msg.sender][mobIndex].health/4;\n                       players[msg.sender].health-=(players[msg.sender].health)/2;\n                         players[msg.sender].qi-=20;\n                 }\n        }\n\n\n        }\n\n\n\n        //getter\n\n        function questChecker(uint256 questIndex) public view returns(bool){\n            bool returnValue=quests[msg.sender][questIndex-1].isCompleted;\n            return returnValue;\n        } \n\n        function getNPCs() public view returns (NPC[] memory) {\n                     return mobs[msg.sender];\n}\n          \n        \n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}