{
  "language": "Solidity",
  "sources": {
    "contracts/btthGame.sol": {
      "content": " // SPDX-License-Identifier: MIT\n\n    pragma solidity 0.8.20;\n\n\n    // Deploy this contract on Fuji\n\n\n   /* import \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n    import \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n*/\n\n    contract BtthGame  {\n\n\n\n        // VRF\n\n        event RequestSent(uint256 requestId, uint32 numWords);\n\n        event RequestFulfilled(uint256 requestId, uint256[] randomWords);\n\n\n        struct RequestStatus {\n\n            bool fulfilled; // whether the request has been successfully fulfilled\n\n            bool exists; // whether a requestId exists\n\n            uint256[] randomWords;\n\n        }\n\n        mapping(uint256 => RequestStatus) public s_requests; /* requestId --> requestStatus */          \n\n\n        // Fuji coordinator\n\n        // https://docs.chain.link/docs/vrf/v2/subscription/supported-networks/\n\n       /* VRFCoordinatorV2Interface COORDINATOR;\n\n        address vrfCoordinator = 0x2eD832Ba664535e5886b75D64C46EB9a228C2610;\n\n        bytes32 keyHash = 0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61;\n\n        uint32 callbackGasLimit = 2500000;\n\n        uint16 requestConfirmations = 3;\n\n        uint32 numWords =  1;\n\n\n        // past requests Ids.\n\n        uint256[] public requestIds;\n\n        uint256 public lastRequestId;\n\n        uint256[] public lastRandomWords;\n\n\n        // Your subscription ID.\n\n        uint64 public s_subscriptionId;\n\n*/\n\n        string[] characters_image = [\n\n            \"https://ipfs.io/ipfs/Qmay3vWmmBJykcT3gnjwiyPsaVMnVthxEzdCqsmeerxhz6\",\n\n            \"https://ipfs.io/ipfs/QmXxtdMWeuwvABMUNvD6nVnTXihNGidRw6YLk8KcCceCoU\",\n\n            \"https://ipfs.io/ipfs/QmXSCRtoxrBPKgTSqvPJkJB4UB6KE5fQowiJKhWNCqwVoS\",\n\n            \"https://ipfs.io/ipfs/QmRHrKfJVc1DcWw5xEHUtoiku5VXM4a7Z8keaeLc1LMK4L\"\n\n        ];\n\n       \n        struct Character {\n            string name;\n            string image;\n            string level;\n            uint256 maxHealth;\n            uint256 health;\n            uint256 attackDamage;\n            uint256 defense;\n            string weapon;\n            uint256 qi;\n            uint256 maxQi;\n            uint256 goldCoin;\n\n        }\n       \n        struct Skill{\n            string name;\n            uint256 Qi_cost;\n        }\n        \n        struct Character_inventory{\n            uint256 healthPotion;\n            uint256 qiRecoveryPill;\n            uint256 revivePotion;\n            uint256 attackEnhancePotion;\n            uint256 goldDropEnhancePotion;\n            Skill[] skill;\n        }\n         struct npc{\n            string name;\n            uint256 tokenId;\n            string level;\n            uint256 maxHealth;\n            uint256 attackDamage;\n            uint256 health;\n            bool isDead;\n\n         }\n          struct Quest_Things{\n            string quest_name;\n            uint256 characterTokenId;\n            npc[] relatedThings;\n            bool isCompleted;\n          }\n        //state varible\n           mapping(address=>Quest_Things[]) public quest;\n           mapping(address=>Character) public player;\n           mapping (address=>Character_inventory) public Inventory;\n           mapping(string=>uint256) public materialValue;\n           //predeclared value\n            \n        //event\n\n        event skillAuction(uint256 bidAmount,address bidder,string SkillName);\n\n        constructor()\n        {\n            materialValue[\"healthPotion\"]=100;\n            materialValue[\"qiRecoveryPill\"]=1000;\n            materialValue[\"revivePotion\"]=10000;\n            materialValue[\"attackEnhancePotion\"]=100000;\n            materialValue[\"goldDropEnhancePotion\"]=100000;\n        }\n        function newGame() public {\n            string memory yourCharacterImage = characters_image[0];\n            player[msg.sender]=Character(\"Xiao yan\", yourCharacterImage, \"two star dou zhi qi\",200,200,0,0,\"nothing\",0,0,0);\n\n        }\n        function equalify(string memory string1,string memory string2) public pure returns(bool){\n            if(keccak256(abi.encodePacked(string1))==keccak256(abi.encodePacked(string2))){\n                return true;\n            }\n           return false;\n        }\n    function store(uint16 num1 ,uint16 num2,uint16 num3,uint16 num4,uint16 num5) public {\n        uint256 amount=(num1*materialValue[\"healthPotion\"]) + (num2*materialValue[\"qiRecoveryPill\"])+\n             (num3*materialValue[\"revivePotion\"])+(num4*materialValue[\"attackEnhancePotion\"])+\n             (num5*materialValue[\"goldDropEnhancePotion\"]);\n             require(amount>0&&amount<=player[msg.sender].goldCoin,\"please either submit correct choice or you have not enogh gold\");\n             player[msg.sender].goldCoin-=amount;\n             Inventory[msg.sender].healthPotion+=num1;\n             Inventory[msg.sender].qiRecoveryPill+=num2;\n             Inventory[msg.sender].attackEnhancePotion+=num3;\n             Inventory[msg.sender].goldDropEnhancePotion+=num4;\n    }\n   \n       //start story\n       function Quest1() public  returns(string memory){\n       require(player[msg.sender].attackDamage>0,\"please create your character first\");\n       require(quest[msg.sender][0].isCompleted!=true,\"you have already completed the quest\");\n                      Inventory[msg.sender].skill.push(Skill(\"vaccum palm\",10));\n                      Inventory[msg.sender].skill.push(Skill(\"octane blast\",20));\n                      player[msg.sender]=Character(\"xiao yan\", player[msg.sender].image,\"eight star dou zhi qi\",300,300,30,10, player[msg.sender].weapon,50,50, player[msg.sender].goldCoin);\n                      quest[msg.sender][0].isCompleted=true;\n       return(\"melee damage,health,qi and defance has been enhanced after completion of quest2 you will be able to participate in pvp tournament\");\n       }\n\n        function Quest2() public returns(string memory){\n        require(quest[msg.sender][0].isCompleted==true,\"you should complete quest1 first\");\n        require(quest[msg.sender][1].isCompleted!=true,\"you have already completed the quest\");\n                      \n       }\n        //\n    } "
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}